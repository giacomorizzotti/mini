// FLEXBOXES

$box-widths: (
  "8":   (100%, 50%, 33.333333%, 16.666666%, 8.333333%),
  "10":  (100%, 50%, 20%, 20%, 10%),
  "12":  (100%, 50%, 25%, 25%, 12.5%),
  "16":  (100%, 50%, 33.333333%, 16.666666%, 16.666666%),
  "20":  (100%, 50%, 50%, 20%, 20%),
  "25":  (100%, 50%, 50%, 25%, 25%),
  "30":  (100%, 50%, 50%, 30%, 30%),
  "33":  (100%, 50%, 33.333333%, 33.333333%, 33.333333%),
  "40":  (100%, 50%, 40%, 40%, 40%),
  "50":  (100%, 50%, 50%, 50%, 50%),
  "60":  (100%, 50%, 60%, 60%, 60%),
  "66":  (100%, 50%, 66.666666%, 66.666666%, 66.666666%),
  "70":  (100%, 100%, 50%, 70%, 70%),
  "75":  (100%, 100%, 50%, 75%, 75%),
  "80":  (100%, 100%, 50%, 80%, 80%),
  "88":  (100%, 100%, 75%, 75%, 87.5%),
  "90":  (100%, 100%, 80%, 80%, 90%),
  "100": (100%, 100%, 100%, 100%, 100%),
);
$breakpoints: (
  "zero": 0,
  "sm": 576px,
  "md": 768px,
  "lg": 992px,
  "xl": 1400px,
  "xxl": 1920px,
);
$orders: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12;
$flex: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12;
$multiplier: "0" 0, "05" 0.5, "1" 1, "15" 1.5, "2" 2, "3" 3, "4" 4, "5" 5, "10" 10, "20" 20;

@mixin respond($breakpoint) {
  @if $breakpoint != "" {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @content;
  }
}

// Display
.none, .display-none {
  display: none!important;
}
.flex, .display-flex {
  display: flex!important;
}
.block, .display-block {
  display: block!important;
}
.inline-block, .display-inline-block {
  display: inline-block!important;
}
.inline, .display-inline {
  display: inline!important;
}

// Order
.order {
  @each $order in $orders {
    &-#{$order} {
      order: #{$order};
    }
  }
}

// Gap
.gap, .g {
  --gap: calc( var(--basic-gap) * 1 );
  @each $gap-label, $gap in $multiplier {
    &-#{$gap-label} {
      --gap: calc( var(--basic-gap) * #{$gap} );
    }
  }
  &y, &-y {
    @each $gap-label, $gap in $multiplier {
      &-#{$gap-label} {
        --gap-y: calc( var(--basic-gap) * #{$gap} );
      }
    }
  }
  &x, &-x {
    @each $gap-label, $gap in $multiplier {
      &-#{$gap-label} {
        --gap-x: calc( var(--basic-gap) * #{$gap} );
      }
    }
  }
}

// Flex classes
.flex {
  @each $grow in $flex {
    &-#{$grow} {
      flex: #{$grow};
      @each $shrink in $flex {
        &-#{$shrink} {
          flex: #{$shrink};
        }
        @each $basis in $flex {
          &-#{$basis} {
            flex: #{$basis};
          }
        }
      }
    }
  }

  &-direction {
    &-row {
      flex-direction: row!important;
    }
    &-row-reverse {
      flex-direction: row-reverse!important;
    }
    &-column {
      flex-direction: column!important;
    }
    &-column-reverse {
      flex-direction: column-reverse!important;
    }
  }

  &-wrap {
    flex-wrap: wrap!important;
  }
  &-no-wrap, &-nowrap {
    flex-wrap: nowrap!important;
  }

  &-flow {
    &-row {
      &-wrap {
        flex-flow: row wrap;
      }
      &-nowrap {
        flex-flow: row nowrap;
      }
    }
    &-column {
      &-wrap {
        flex-flow: column wrap;
      }
      &-nowrap {
        flex-flow: column nowrap;
      }
    }
  }
  
}

.justify-content {
  &-start {
    justify-content: flex-start!important;
  }
  &-end {
    justify-content: flex-end!important;
  }
  &-center {
    justify-content: center!important;
  }
  &-between {
    justify-content: space-between!important;
  }
  &-around {
    justify-content: space-around!important;
  }
}

.align-content {
  &-start {
    align-content: flex-start!important;
  }
  &-end {
    align-content: flex-end!important;
  }
  &-center {
    align-content: center!important;
  }
  &-stretch {
    align-content: stretch!important;
  }
  &-between {
    align-content: space-between!important;
  }
  &-around {
    align-content: space-around!important;
  }
}

.align-items {
  &-start {
    align-items: flex-start!important;
  }
  &-end {
    align-items: flex-end!important;
  }
  &-center {
    align-items: center!important;
  }
  &-stretch {
    align-items: stretch!important;
  }
}

// breakpoint clsses
@each $breakpoint, $screenSize in $breakpoints {
  #{$breakpoint}- {
    @media (min-width: #{$screenSize}) {

      // Display
      .none, .display-none {
        display: none!important;
      }
      .flex, .display-flex {
        display: flex!important;
      }
      .block, .display-block {
        display: block!important;
      }
      .inline-block, .display-inline-block {
        display: inline-block!important;
      }
      .inline, .display-inline {
        display: inline!important;
      }

      // Order
      .order {
        @each $order in $orders {
          &-#{$order} {
            order: #{$order};
          }
        }
      }

      // Gap
      .gap, .g {
        --gap: calc( var(--basic-gap) * 1 );
        @each $gap-label, $gap in $multiplier {
          &-#{$gap-label} {
            --gap: calc( var(--basic-gap) * #{$gap} );
          }
        }
        &y, &-y {
          @each $gap-label, $gap in $multiplier {
            &-#{$gap-label} {
              --gap-y: calc( var(--basic-gap) * #{$gap} );
            }
          }
        }
        &x, &-x {
          @each $gap-label, $gap in $multiplier {
            &-#{$gap-label} {
              --gap-x: calc( var(--basic-gap) * #{$gap} );
            }
          }
        }
      }

      // Flex classes
      $flex-directions: row, row-reverse, column, column-reverse;
      $flex-wraps: wrap, nowrap;
      $flex-flows: (
        row: (wrap, nowrap),
        column: (wrap, nowrap)
      );

      .flex {
        @each $dir in $flex-directions {
          &-direction-#{$dir} {
            flex-direction: #{$dir}!important;
          }
        }
        @each $wrap in $flex-wraps {
          &-wrap#{if($wrap == nowrap, '', '-' + $wrap)} {
            flex-wrap: #{$wrap}!important;
          }
        }
        // Support both -no-wrap and -nowrap
        &-no-wrap, &-nowrap {
          flex-wrap: nowrap!important;
        }
        // Flex-flow combinations
        @each $main, $subs in $flex-flows {
          @each $sub in $subs {
            &-flow-#{$main}-#{$sub} {
              flex-flow: #{$main} #{$sub};
            }
          }
        }
      }

      .justify-content {
        &-start {
          justify-content: flex-start!important;
        }
        &-end {
          justify-content: flex-end!important;
        }
        &-center {
          justify-content: center!important;
        }
        &-between {
          justify-content: space-between!important;
        }
        &-around {
          justify-content: space-around!important;
        }
      }

      .align-content {
        &-start {
          align-content: flex-start!important;
        }
        &-end {
          align-content: flex-end!important;
        }
        &-center {
          align-content: center!important;
        }
        &-stretch {
          align-content: stretch!important;
        }
        &-between {
          align-content: space-between!important;
        }
        &-around {
          align-content: space-around!important;
        }
      }

      .align-items {
        &-start {
          align-items: flex-start!important;
        }
        &-end {
          align-items: flex-end!important;
        }
        &-center {
          align-items: center!important;
        }
        &-stretch {
          align-items: stretch!important;
        }
      }

    }
  }
}

.container {
  width: 100%;
  margin: 0 auto;
  position: relative;
  max-width: calc(var(--max-screen) * 0.75);
  @media only screen and (min-width: 992px) {
    max-width: calc(var(--max-screen) * 1);
  }
  &.fw, &.full-width {
    min-width: 100%;
    width: 100%;
    max-width: 100%;
    &.forced {
      min-width: 100vw;
      width: 100vw;
      max-width: 100vw;
      left: 50%;
      transform: translate(-50%, 0);
    }
  }
  &.thin {
    max-width: calc(var(--max-screen) * 0.5);
    @media only screen and (min-width: 992px) {
      max-width: calc(var(--max-screen) * 0.75);
    }
  }
  &.wide {
    max-width: calc(var(--max-screen) * 1);
    @media only screen and (min-width: 992px) {
      max-width: calc(var(--max-screen) * 1.25);
    }
  }
}

.boxes {
  display: flex;
  position: relative;
  flex-flow: row wrap;
  --gap: calc(var(--basic-gap) * 1);
  --gap-y: calc(var(--gap) * 1);
  --gap-x: calc(var(--gap) * 1);
  gap: var(--gap-y) var(--gap-x);

  .box {
    position: relative;
    margin: 0;
    padding: calc(var(--padding) * 1);
    //flex-basis: 100%;
    flex-grow: 0;

    // Generate .box-{{breakpoint}}-{{label}} classes in breakpoint order
    @each $breakpoint, $minwidth in $breakpoints {
      $labels: map-keys($box-widths);
      @each $label in $labels {
        $widths: map-get($box-widths, $label);
        $index: index(map-keys($breakpoints), $breakpoint);
        $width: nth($widths, 5);
        &-#{$breakpoint}-#{$label} {
          @include respond($breakpoint) {
            flex-basis: calc(#{$width} + var(--gap-x) * ( 100 - ( $width / 1% ) ) * 0.01 * -1);
            max-width: #{$width};
          }
        }
      }
    }

    // Generate responsive box width classes
    @each $label, $widths in $box-widths {
      &-#{$label} {
        @extend .box;
        @for $i from 1 through 5 {
          $breakpoint: nth(map-keys($breakpoints), $i);
          $width: nth($widths, $i);
          @include respond($breakpoint) {
            flex-basis: calc(#{$width} + var(--gap-x) * ( 100 - ( $width / 1% ) ) * 0.01 * -1);
            max-width: #{$width};
          }
        }
      }
    }
  }
}