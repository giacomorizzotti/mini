// FLEXBOXES

$box-widths: (
  "8":   (100%, 50%, 33.333333%, 16.666666%, 8.333333%, 0.926666),
  "10":  (100%, 50%, 20%, 20%, 10%, 0.9),
  "12":  (100%, 50%, 25%, 25%, 12.5%, 0.875),
  "16":  (100%, 50%, 33.333333%, 16.666666%, 16.666666%, 0.84333333),
  "20":  (100%, 50%, 50%, 20%, 20%, 0.8),
  "25":  (100%, 50%, 50%, 25%, 25%, 0.75),
  "30":  (100%, 50%, 50%, 30%, 30%, 0.7),
  "33":  (100%, 50%, 33.333333%, 33.333333%, 33.333333%, 0.666666),
  "40":  (100%, 50%, 40%, 40%, 40%, 0.6),
  "50":  (100%, 50%, 50%, 50%, 50%, 0.5),
  "60":  (100%, 50%, 60%, 60%, 60%, 0.4),
  "66":  (100%, 50%, 66.666666%, 66.666666%, 66.666666%, 0.333333),
  "70":  (100%, 100%, 50%, 70%, 70%, 0.3),
  "75":  (100%, 100%, 50%, 75%, 75%, 0.25),
  "80":  (100%, 100%, 50%, 80%, 80%, 0.2),
  "88":  (100%, 100%, 75%, 75%, 87.5%, 0.125),
  "90":  (100%, 100%, 80%, 80%, 90%, 0.1),
  "100": (100%, 100%, 100%, 100%, 100%, 0),
);

$breakpoints: (
  "zero": 0,
  "sm": 576px,
  "md": 768px,
  "lg": 992px,
  "xl": 1400px,
  "xxl": 1920px,
);

@mixin respond($breakpoint) {
  @if $breakpoint != "" {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @content;
  }
}

.container {
  width: 100%;
  margin: 0 auto;
  position: relative;
  max-width: calc(var(--max-screen) * 0.75);
  @media only screen and (min-width: 992px) {
    max-width: calc(var(--max-screen) * 1);
  }
  &.fw, &.full-width {
    min-width: 100%;
    width: 100%;
    max-width: 100%;
    &.forced {
      min-width: 100vw;
      width: 100vw;
      max-width: 100vw;
      left: 50%;
      transform: translate(-50%, 0);
    }
  }
  &.thin {
    max-width: calc(var(--max-screen) * 0.5);
    @media only screen and (min-width: 992px) {
      max-width: calc(var(--max-screen) * 0.75);
    }
  }
  &.wide {
    max-width: calc(var(--max-screen) * 1);
    @media only screen and (min-width: 992px) {
      max-width: calc(var(--max-screen) * 1.25);
    }
  }
}

.boxes {
  display: flex;
  position: relative;
  flex-flow: row wrap;
  --gap: calc(var(--basic-gap) * 1);
  --gap-y: calc(var(--gap) * 1);
  --gap-x: calc(var(--gap) * 1);
  gap: var(--gap-y) var(--gap-x);

  .box {
    position: relative;
    margin: 0;
    padding: calc(var(--padding) * 1);
    flex-basis: 100%;
    flex-grow: 0;
  
    // Generate .box-{{breakpoint}}-{{label}} classes in breakpoint order
    @each $breakpoint, $minwidth in $breakpoints {
      $labels: map-keys($box-widths);
      @each $label in $labels {
        $widths: map-get($box-widths, $label);
        $index: index(map-keys($breakpoints), $breakpoint);
        $width: if($index == 6, nth($widths, 5), nth($widths, $index));
        &-#{$breakpoint}-#{$label} {
          @include respond($breakpoint) {
            flex-basis: calc(#{$width} + var(--gap-x) * nth($widths, 6) * -1);
            max-width: #{$width};
          }
        }
      }
    }

    // Generate responsive box width classes
    @each $label, $widths in $box-widths {
      $moltiplicator: nth($widths, 6);

      &-#{$label} {
        @extend .box;
        @for $i from 1 through 5 {
          $breakpoint: nth(map-keys($breakpoints), $i);
          $width: nth($widths, $i);
          @include respond($breakpoint) {
            flex-basis: calc(#{$width} + var(--gap-x) * #{$moltiplicator} * -1);
            max-width: #{$width};
          }
        }
      }

    }
  }
}